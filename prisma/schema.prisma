datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String         @id @default(cuid())
  firstName         String?
  lastName          String?
  dateOfBirth       DateTime?
  instrument        String?
  secondaryInstrument String?
  level            String?
  teacher          String?
  phone            String?
  email            String         @unique
  role             Role           @default(STUDENT)
  isActive         Boolean        @default(true)
  availabilities   Availability[]
  accounts         Account[]
  sessions         Session[]
  emailVerified    DateTime?
  image            String?
  password         String?        // Hashed password for email/password auth
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Availability {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  dayOfWeek Int      // 1 = Lundi, 2 = Mardi, etc.
  startTime String   // Format "HH:mm"
  endTime   String   // Format "HH:mm"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id          String   @id @default(cuid())
  name        String
  dayOfWeek   Int
  startTime   String
  endTime     String
  level       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
  SUPER_ADMIN
} 